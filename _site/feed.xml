<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-06T19:45:16+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Kostas Konstantopoulos</title><subtitle></subtitle><entry><title type="html">Parent Package Exceptions</title><link href="http://localhost:4000/parent-package-exceptions" rel="alternate" type="text/html" title="Parent Package Exceptions" /><published>2022-12-28T08:00:00+02:00</published><updated>2022-12-28T08:00:00+02:00</updated><id>http://localhost:4000/global-package-exceptions</id><content type="html" xml:base="http://localhost:4000/parent-package-exceptions"><![CDATA[<p>When writing a package it is a good practice to bundle all possible exceptions under a single, top-level parent. By doing so, the package user can deal with all possible exceptions by intercepting the parent exception.</p>

<p>A purist may argue that one should handle each and every exception scenario individually. This opinion hold some merit especially for mission critical systems but it is not always easy to do so, and not always needed. For example when the package is provides an optional service, the user may only need to know if the service succeeded or not and move on. Handling each and every exception in this situation is wasteful.</p>

<p>Another problem is that future releases of the package may introduce new exceptions that will escape and potentially break the system. Handling individual exceptions <strong><em>and</em></strong> having a catch all clause is the way to go in many situations.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">MyPackageParentException</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">class</span> <span class="nc">CustomException1</span><span class="p">(</span><span class="n">MyPackageParentException</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">class</span> <span class="nc">CustomException2</span><span class="p">(</span><span class="n">MyPackageParentException</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">class</span> <span class="nc">MyClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">do_stuff_1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="n">CustomException1</span>

    <span class="k">def</span> <span class="nf">do_stuff_2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="n">CustomException2</span>


<span class="n">m</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>

<span class="k">try</span><span class="p">:</span>
    <span class="n">m</span><span class="p">.</span><span class="n">do_stuff_1</span><span class="p">()</span>
    <span class="p">...</span>
    <span class="n">m</span><span class="p">.</span><span class="n">do_stuff_2</span><span class="p">()</span>
<span class="k">except</span> <span class="n">CustomException1</span><span class="p">:</span>
    <span class="p">...</span>  <span class="c1"># handle CustomException1
</span><span class="k">except</span> <span class="n">CustomException2</span><span class="p">:</span>
    <span class="p">...</span>  <span class="c1"># handle CustomException2
</span><span class="k">except</span> <span class="n">MyPackageParentException</span><span class="p">:</span>
    <span class="p">...</span>  <span class="c1"># handle any other mypackage related problem</span></code></pre></figure>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[When writing a package it is a good practice to bundle all possible exceptions under a single, top-level parent. By doing so, the package user can deal with all possible exceptions by intercepting the parent exception.]]></summary></entry><entry><title type="html">Code snippets plugin for Jekyll</title><link href="http://localhost:4000/code-snippets-plugin-for-jekyll" rel="alternate" type="text/html" title="Code snippets plugin for Jekyll" /><published>2021-12-01T17:00:00+02:00</published><updated>2021-12-01T17:00:00+02:00</updated><id>http://localhost:4000/dynamic-code-blocks-plugin</id><content type="html" xml:base="http://localhost:4000/code-snippets-plugin-for-jekyll"><![CDATA[<p>When I started writing this blog in <a href="https://jekyllrb.com" target="_blank">Jekyll</a>, I wanted to keep my code snippets in git and automatically inject them in my posts as needed. Disappointingly, Jekyll didn’t support this feature out of the box. Fortunately, Bryan Roessler <a href="https://blog.bryanroessler.com/2020-03-18-insert-code-blocks-from-repository/" target="_blank">in his blog</a> has an excellent plugin that worked nicely (although I was getting some warnings about the open-uri library). However, I recently updated to a newer version of Ruby and it stopped working altogether. Maybe I was missing a gem or something but in any case I decided that it was a good opportunity to get rid of open-uri. The tweaked code looks like this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'net/http'</span>
<span class="nb">require</span> <span class="s1">'uri'</span>

<span class="k">module</span> <span class="nn">Jekyll</span>
    <span class="k">class</span> <span class="nc">InsertGitCode</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Tag</span>

        <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
            <span class="k">super</span>
            <span class="n">url</span> <span class="o">=</span> <span class="n">url</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
            <span class="vi">@file</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>
        <span class="k">end</span>

        <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">_context</span><span class="p">)</span>
            <span class="vi">@file</span>
        <span class="k">end</span>

    <span class="k">end</span>
<span class="k">end</span>

<span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="p">.</span><span class="nf">register_tag</span><span class="p">(</span><span class="s1">'insert_git_code'</span><span class="p">,</span> <span class="no">Jekyll</span><span class="o">::</span><span class="no">InsertGitCode</span><span class="p">)</span></code></pre></figure>

<p>I hear a little voice in my head that says that I should probably sanitize the injected data, but as long as I only inject my own code, it should be ok.</p>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[When I started writing this blog in Jekyll, I wanted to keep my code snippets in git and automatically inject them in my posts as needed. Disappointingly, Jekyll didn’t support this feature out of the box. Fortunately, Bryan Roessler in his blog has an excellent plugin that worked nicely (although I was getting some warnings about the open-uri library). However, I recently updated to a newer version of Ruby and it stopped working altogether. Maybe I was missing a gem or something but in any case I decided that it was a good opportunity to get rid of open-uri. The tweaked code looks like this:]]></summary></entry><entry><title type="html">Dynamic Django DRF Serializers with type()</title><link href="http://localhost:4000/dynamic-django-drf-serializers-type" rel="alternate" type="text/html" title="Dynamic Django DRF Serializers with type()" /><published>2021-11-21T15:48:00+02:00</published><updated>2021-11-21T15:48:00+02:00</updated><id>http://localhost:4000/dynamic-django-drf-serializers</id><content type="html" xml:base="http://localhost:4000/dynamic-django-drf-serializers-type"><![CDATA[<p>I recently needed to validate an API request payload based on dynamic runtime conditions. I ended up solving this with a <a href="https://www.django-rest-framework.org/api-guide/validators/#function-based" target="_blank">function based custom validator</a>.</p>

<p>On the way though, I figured that this can also be done by creating serializer instances dynamically with Python build-in <em>type()</em>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>

<span class="k">def</span> <span class="nf">get_serializer</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">type</span><span class="p">(</span>
        <span class="s">"SerializerName"</span><span class="p">,</span>
        <span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">Serializer</span><span class="p">,),</span>
        <span class="p">{</span>
            <span class="s">"prop1"</span><span class="p">:</span> <span class="n">serializers</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">(...),</span>
            <span class="s">"prop2"</span><span class="p">:</span> <span class="n">serializers</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">(...),</span>
            <span class="p">...</span>
        <span class="p">}</span>
    <span class="p">)</span></code></pre></figure>

<p>This is a interesting technique that enables complete runtime customization of the serializer. However <em>type()</em> seems to be much slower than creating instances normally so it may not be suitable for production without same additional work.</p>]]></content><author><name></name></author><category term="software-engineering" /><summary type="html"><![CDATA[I recently needed to validate an API request payload based on dynamic runtime conditions. I ended up solving this with a function based custom validator.]]></summary></entry><entry><title type="html">The Strategy Factory</title><link href="http://localhost:4000/strategy-factory-pattern" rel="alternate" type="text/html" title="The Strategy Factory" /><published>2021-04-14T22:33:00+03:00</published><updated>2021-04-14T22:33:00+03:00</updated><id>http://localhost:4000/strategy-factory</id><content type="html" xml:base="http://localhost:4000/strategy-factory-pattern"><![CDATA[<p>Very often it is necessary to choose different algorithms based on runtime conditions. A beautiful way to achieve this is by combining the Strategy and the Factory patterns.</p>

<h2 id="strategy-pattern">Strategy Pattern</h2>

<p>Bellow we have a program that has some data and prints them to console:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#!/usr/bin/python
</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span>


<span class="k">def</span> <span class="nf">export_data</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]):</span>
    <span class="s">"""
    Formats data, and saves to specified file.
    :param data: The data we want to export.
    """</span>
    <span class="n">result_formatted</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">result_formatted</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Alice"</span><span class="p">,</span> <span class="s">"location"</span><span class="p">:</span> <span class="s">"Tokyo"</span><span class="p">},</span>
        <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Bob"</span><span class="p">,</span> <span class="s">"location"</span><span class="p">:</span> <span class="s">"Houston"</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="n">export_data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span></code></pre></figure>

<p>Let’s say we need to extend this program with new functionalities, for example:</p>

<p><strong>a.</strong> More formats (eg. CSV)</p>

<p><strong>b.</strong> Export to a file.</p>

<p>We could probably get by with a bunch of if-else branches but such a solution can quickly become unmanageable and ugly. The strategy pattern is ideal in a case like this. Essentially it allow us to break down the different complications into separate pluggable components.</p>

<p>We start by defining <em>FormatHandler</em> as an interface that the various formatting handlers must implement. We then define two formatting handlers according to our needs: <em>JSONFormatHandler</em> and <em>CSVFormatHandler</em>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span>


<span class="k">class</span> <span class="nc">FormatHandler</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="o">@</span><span class="n">abstractmethod</span>
    <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="s">"""
        :param data: Data to format.
        :return: Formatted data.
        """</span>
        <span class="k">pass</span>


<span class="k">class</span> <span class="nc">FormatToJSON</span><span class="p">(</span><span class="n">FormatHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">indent</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4</span><span class="p">):</span>
        <span class="s">"""
        :param indent: Number of indentation spaces.
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">indent</span> <span class="o">=</span> <span class="n">indent</span>

    <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">indent</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">FormatToCSV</span><span class="p">(</span><span class="n">FormatHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">separator</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">","</span><span class="p">):</span>
        <span class="s">"""
        :param separator: Column separator string.
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">separator</span> <span class="o">=</span> <span class="n">separator</span>

    <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="n">join</span><span class="p">(</span>
            <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">separator</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">row</span><span class="p">.</span><span class="n">values</span><span class="p">()))</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>
        <span class="p">)</span></code></pre></figure>

<p>Similarly we define <em>OutputHandler</em> an interface for the various output handlers. Based on that we define handlers <em>OutputToConsole</em> and <em>OutputToFile</em>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>


<span class="k">class</span> <span class="nc">OutputHandler</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="o">@</span><span class="n">abstractmethod</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="s">"""
        :param data: Data to output.
        :return: None
        """</span>
        <span class="k">pass</span>


<span class="k">class</span> <span class="nc">OutputToConsole</span><span class="p">(</span><span class="n">OutputHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">OutputToFile</span><span class="p">(</span><span class="n">OutputHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filepath</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"w"</span><span class="p">):</span>
        <span class="s">"""
        :param filepath: Absolute path of file where data will be saved.
        :param mode: Mode in which the file is opened.
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">filepath</span> <span class="o">=</span> <span class="n">filepath</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mode</span> <span class="o">=</span> <span class="n">mode</span>

    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">filepath</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">mode</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span></code></pre></figure>

<p>Then we plug in the new components in the export_data and main:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">export_data</span><span class="p">(</span>
    <span class="n">data</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]],</span>
    <span class="n">format_handler</span><span class="p">:</span> <span class="n">FormatHandler</span><span class="p">,</span>
    <span class="n">output_handler</span><span class="p">:</span> <span class="n">OutputHandler</span><span class="p">,</span>
<span class="p">):</span>
    <span class="s">"""
    Formats data, and outputs according to specified OutputHandler.
    :param data: The data we want to export.
    :param format_handler: Handler object that formats data as desired.
    :param output_handler: Handler object that outputs data as desired.
    :return: None
    """</span>
    <span class="n">output_handler</span><span class="p">.</span><span class="n">handle</span><span class="p">(</span><span class="n">format_handler</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Alice"</span><span class="p">,</span> <span class="s">"location"</span><span class="p">:</span> <span class="s">"Tokyo"</span><span class="p">},</span>
        <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Bob"</span><span class="p">,</span> <span class="s">"location"</span><span class="p">:</span> <span class="s">"Houston"</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="n">export_data</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">FormatToJSON</span><span class="p">(),</span> <span class="n">OutputToFile</span><span class="p">(</span><span class="s">"output.json"</span><span class="p">))</span>
    <span class="n">export_data</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">FormatToCSV</span><span class="p">(),</span> <span class="n">OutputToConsole</span><span class="p">())</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span></code></pre></figure>

<p>Notice how we multiplex the various components in order to achieve different functionalities (strategies) as desired.</p>

<h2 id="factory-pattern">Factory Pattern</h2>

<p>We can take this one step further and mix the components dynamically according to runtime conditions (such as user input). A nice way to do this is by using the factory pattern.</p>

<p>The factory is essentially a construct that has an “inventory” of items (usually but not necessarily classes), and is able to build instances of these items to order.</p>

<p>In the above example we a factory for the FormatHandlers can look like this:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">FormatHandlerFactory</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">inventory</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">"json"</span><span class="p">:</span> <span class="n">FormatToJSON</span><span class="p">,</span>
        <span class="s">"csv"</span><span class="p">:</span> <span class="n">FormatToCSV</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">item</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">FormatHandler</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">FormatHandlerFactory</span><span class="p">.</span><span class="n">inventory</span><span class="p">[</span><span class="n">item</span><span class="p">]()</span></code></pre></figure>

<p>Putting everything together:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#!/usr/bin/python
</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span>


<span class="k">class</span> <span class="nc">FormatHandler</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="o">@</span><span class="n">abstractmethod</span>
    <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="s">"""
        :param data: Data to format.
        :return: Formatted data.
        """</span>
        <span class="k">pass</span>


<span class="k">class</span> <span class="nc">FormatToJSON</span><span class="p">(</span><span class="n">FormatHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">indent</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4</span><span class="p">):</span>
        <span class="s">"""
        :param indent: Number of indentation spaces.
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">indent</span> <span class="o">=</span> <span class="n">indent</span>

    <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">indent</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">FormatToCSV</span><span class="p">(</span><span class="n">FormatHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">separator</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">","</span><span class="p">):</span>
        <span class="s">"""
        :param separator: Column separator string.
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">separator</span> <span class="o">=</span> <span class="n">separator</span>

    <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">.</span><span class="n">join</span><span class="p">(</span>
            <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">separator</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">row</span><span class="p">.</span><span class="n">values</span><span class="p">()))</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>
        <span class="p">)</span>


<span class="k">class</span> <span class="nc">OutputHandler</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="o">@</span><span class="n">abstractmethod</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="s">"""
        :param data: Data to output.
        :return: None
        """</span>
        <span class="k">pass</span>


<span class="k">class</span> <span class="nc">OutputToConsole</span><span class="p">(</span><span class="n">OutputHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">OutputToFile</span><span class="p">(</span><span class="n">OutputHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filepath</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"w"</span><span class="p">):</span>
        <span class="s">"""
        :param filepath: Absolute path of file where data will be saved.
        :param mode: Mode in which the file is opened.
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">filepath</span> <span class="o">=</span> <span class="n">filepath</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mode</span> <span class="o">=</span> <span class="n">mode</span>

    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">filepath</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">mode</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">export_data</span><span class="p">(</span>
    <span class="n">data</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]],</span>
    <span class="n">format_handler</span><span class="p">:</span> <span class="n">FormatHandler</span><span class="p">,</span>
    <span class="n">output_handler</span><span class="p">:</span> <span class="n">OutputHandler</span><span class="p">,</span>
<span class="p">):</span>
    <span class="s">"""
    Formats data, and outputs according to specified OutputHandler.
    :param data: The data we want to export.
    :param format_handler: Handler object that formats data as desired.
    :param output_handler: Handler object that outputs data as desired.
    :return: None
    """</span>
    <span class="n">output_handler</span><span class="p">.</span><span class="n">handle</span><span class="p">(</span><span class="n">format_handler</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>


<span class="k">class</span> <span class="nc">FormatHandlerFactory</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">inventory</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">"json"</span><span class="p">:</span> <span class="n">FormatToJSON</span><span class="p">,</span>
        <span class="s">"csv"</span><span class="p">:</span> <span class="n">FormatToCSV</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">item</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">FormatHandler</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">FormatHandlerFactory</span><span class="p">.</span><span class="n">inventory</span><span class="p">[</span><span class="n">item</span><span class="p">]()</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">format_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Alice"</span><span class="p">,</span> <span class="s">"location"</span><span class="p">:</span> <span class="s">"Tokyo"</span><span class="p">},</span>
        <span class="p">{</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Bob"</span><span class="p">,</span> <span class="s">"location"</span><span class="p">:</span> <span class="s">"Houston"</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">format_handler</span> <span class="o">=</span> <span class="n">FormatHandlerFactory</span><span class="p">.</span><span class="n">build</span><span class="p">(</span><span class="n">format_name</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">KeyError</span><span class="p">:</span>
        <span class="n">format_handler</span> <span class="o">=</span> <span class="n">FormatToJSON</span><span class="p">()</span>  <span class="c1"># default
</span>
    <span class="n">export_data</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">format_handler</span><span class="p">,</span> <span class="n">OutputToConsole</span><span class="p">())</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">format_name_clean</span> <span class="o">=</span> <span class="s">"csv"</span>  <span class="c1"># e.g. read this from argv
</span>    <span class="n">main</span><span class="p">(</span><span class="n">format_name_clean</span><span class="p">)</span></code></pre></figure>]]></content><author><name></name></author><category term="software-engineering" /><summary type="html"><![CDATA[Very often it is necessary to choose different algorithms based on runtime conditions. A beautiful way to achieve this is by combining the Strategy and the Factory patterns.]]></summary></entry><entry><title type="html">Dependency Injection</title><link href="http://localhost:4000/dependency-injection-intro" rel="alternate" type="text/html" title="Dependency Injection" /><published>2021-04-08T17:36:00+03:00</published><updated>2021-04-08T17:36:00+03:00</updated><id>http://localhost:4000/depedency-injection</id><content type="html" xml:base="http://localhost:4000/dependency-injection-intro"><![CDATA[<p>Dependency injection is the act of passing resources (“dependencies”) from an outer scope to an inner one, instead of letting the inner scope accessing them directly.</p>

<p>The most common way to “inject” the resources is to pass them as function arguments. In the extreme case even simple function primitive arguments can be considered as a form on dependency injection, but the term is usually reserved for more complex components.</p>

<p>Common reasons behind this concept:</p>
<ul>
  <li><a href="/functional-purity">Functional purity</a>.</li>
  <li>Remove irrelevant responsibilities from inner scopes.</li>
  <li><a href="/strategy-factory-pattern">Strategy pattern</a>.</li>
  <li>Ability re-use same resource instance and centrally regulate access to it.</li>
</ul>

<p>The common denominator is the need to dynamically select the dependency instance at runtime.</p>

<p>Example: Function <em>get_season_today</em> returns the season of the year based on today’s date (eg. “spring”).</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#!/usr/bin/python
</span>
<span class="kn">import</span> <span class="nn">datetime</span>


<span class="k">def</span> <span class="nf">get_season_today</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="s">"""
    Finds what the current season is based on today's date.
    :return: The name of the season.
    """</span>

    <span class="n">month</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">date</span><span class="p">.</span><span class="n">today</span><span class="p">().</span><span class="n">month</span>

    <span class="k">if</span> <span class="mi">3</span> <span class="o">&lt;=</span> <span class="n">month</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"spring"</span>
    <span class="k">if</span> <span class="mi">6</span> <span class="o">&lt;=</span> <span class="n">month</span> <span class="o">&lt;=</span> <span class="mi">8</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"summer"</span>
    <span class="k">if</span> <span class="mi">9</span> <span class="o">&lt;=</span> <span class="n">month</span> <span class="o">&lt;=</span> <span class="mi">11</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"autumn"</span>

    <span class="k">return</span> <span class="s">"winter"</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">get_season_today</span><span class="p">())</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span></code></pre></figure>

<p>Today’s datetime resource is retrieved from within the function itself. Notice how this makes <em>get_season_today</em> function impure and hard to test (it is hard to control the system’s date). On top of that, this code is not reusable. What if we wanted to know the season 27 days from today? We would have to define a new function (called something like <em>get_season_after_27_days</em>) with a lot of duplicate code.</p>

<p>This is definitely not the way to go!</p>

<p>The solution in this case is simple: Inject the datetime resource from an outer scope!</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1">#!/usr/bin/python
</span>
<span class="kn">import</span> <span class="nn">datetime</span>


<span class="k">def</span> <span class="nf">get_season_today</span><span class="p">(</span><span class="n">today</span><span class="p">:</span> <span class="n">datetime</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="s">"""
    Finds what the current season is based on today's date.
    :param today: Today's date.
    :return: The name of the season.
    """</span>

    <span class="n">month</span> <span class="o">=</span> <span class="n">today</span><span class="p">.</span><span class="n">month</span>

    <span class="k">if</span> <span class="mi">3</span> <span class="o">&lt;=</span> <span class="n">month</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"spring"</span>
    <span class="k">if</span> <span class="mi">6</span> <span class="o">&lt;=</span> <span class="n">month</span> <span class="o">&lt;=</span> <span class="mi">8</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"summer"</span>
    <span class="k">if</span> <span class="mi">9</span> <span class="o">&lt;=</span> <span class="n">month</span> <span class="o">&lt;=</span> <span class="mi">11</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">"autumn"</span>

    <span class="k">return</span> <span class="s">"winter"</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">get_season_today</span><span class="p">(</span><span class="n">today</span><span class="o">=</span><span class="n">datetime</span><span class="p">.</span><span class="n">date</span><span class="p">.</span><span class="n">today</span><span class="p">()))</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span></code></pre></figure>]]></content><author><name></name></author><category term="software-engineering" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Functional Purity</title><link href="http://localhost:4000/functional-purity" rel="alternate" type="text/html" title="Functional Purity" /><published>2020-09-10T17:00:00+03:00</published><updated>2020-09-10T17:00:00+03:00</updated><id>http://localhost:4000/functional-purity</id><content type="html" xml:base="http://localhost:4000/functional-purity"><![CDATA[<p>Functional purity is an important concept in computer science. A function is <em>pure</em> if it satisfies the following two criteria:</p>

<p><strong>a.</strong> The result is determined exclusively by the provided arguments.</p>

<p><strong>b.</strong> The execution of the function does not cause side effects (mutations) outside of own scope.</p>

<p>Example 1: Function <em>add</em> is pure because it satisfies both criteria.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="mi">3</span></code></pre></figure>

<p>Example 2: Function <em>add_random</em> is impure because the result is different every time we run it (even though provided argument <em>a</em> is the same).</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>

<span class="k">def</span> <span class="nf">add_random</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">add_random</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">add_random</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">11</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">add_random</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">8</span></code></pre></figure>

<p>Example 3: Function <em>add_total</em> is impure because it mutates total and (prints to) stdout.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>


<span class="k">def</span> <span class="nf">add_total</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">total</span>
    <span class="n">total</span> <span class="o">+=</span> <span class="n">a</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Total: {0}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">total</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">total</span>


<span class="o">&gt;&gt;&gt;</span> <span class="n">add_total</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">Total</span><span class="p">:</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">add_total</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">Total</span><span class="p">:</span> <span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">add_total</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">)</span>
<span class="n">Total</span><span class="p">:</span> <span class="o">-</span><span class="mi">2</span></code></pre></figure>

<p>Functional purity is a big deal for Functional Programming. However it applies to other paradigms as well.</p>

<p>Benefits of pure functions:</p>

<ul>
  <li>
    <p><strong>Modularity:</strong> Pure functions have a single coupling point and therefore promote modular design. A program can be composed of a middleware layer that interacts with -but is not affected by- a number of such functions / modules. Each module can be examined, modified, or replaced independently. Different people can work on different modules in parallel, as long as the signature and return values are respected.</p>
  </li>
  <li>
    <p><strong>Easier to trace problems:</strong> In a program that is composed of pure functions, the execution flows in a predicted way. Data are not mutated across different scopes, making it easier to trace the origin of a problem. Furthermore, each function can be examined and debugged in isolation.</p>
  </li>
</ul>

<ul>
  <li>
    <p><strong>Easier to test:</strong> Writing tests for pure functions is trivial. All that is required is to call the function with a set of inputs and assert that the expected result is returned. Testing impure functions is not easy; In many cases it involves intricate initialization and mocking up external dependencies, and capturing possible side effects (eg. stdout, DB, API calls). Post-test cleanup may also be needed to bring the system back in a default state.</p>
  </li>
  <li>
    <p><strong>Can be memoized:</strong> Pure functions can be memoized which can lead to massive speed gains.</p>
  </li>
  <li>
    <p><strong>Easier to parallelize:</strong> Pure functions are thread-safe by definition.</p>
  </li>
</ul>]]></content><author><name></name></author><category term="software-engineering" /><summary type="html"><![CDATA[Functional purity is an important concept in computer science. A function is pure if it satisfies the following two criteria:]]></summary></entry></feed>